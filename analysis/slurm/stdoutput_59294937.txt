==========================================
SLURM_JOB_ID = 59294937
SLURM_NODELIST = c4-87
==========================================
# this file runs closed loop simulations to test the performance of alternative polcies
include("SurplusProduction.jl")
include("../src/ParticleFilters.jl")
include("../src/BeliefStateTransitions.jl")
using Distributions

println(Threads.nthreads())
    
# define model and solve MDP
Fmsy= 0.2; price=1.0;sigma_a=0.1;sigma_p=1.5;NMVmax = 1.0;Sigma_N=0.05
MSY=10;pstar=0.4;c1 = 1.0/Fmsy;c2=0.0085
c3=2.0;b=2*Fmsy/MSY;discount=0.05;SigmaN=0.05
model=SurplusProduction.init_model(MSY,Fmsy,pstar,SigmaN,sigma_a,sigma_p,c1,c2,c3,b,
                                        NMVmax*MSY,discount;price=price,N=2,actions=[1,2],CVmax=1.05)


# define alternative policies 
function steps(s, Bhat_breaks, sigma_levels)
    
    if s[1][1] < Bhat_breaks[1]
        if s[2][1,1] > sigma_levels[1]
            return 2
        else
            return 1
        end 
    elseif s[1][1] <Bhat_breaks[2]
        if s[2][1,1] > sigma_levels[2]
            return 2
        else
            return 1
        end 
    else
        if s[2][1,1] > sigma_levels[3]
            return 2
        else
            return 1
        end 
    end 
    
end 


function NPV(B0, sigma0, P,delta, T, model, R;Nfilter = 500)
    
    filter = BeliefStateTransitions.ParticleFilters.init(Nfilter,Distributions.MvNormal([log(B0)],[sigma0;;]))#sigma0
    x0 = [rand(Distributions.Normal(log(B0), sqrt(sigma0)))]
    s0 = ([log(B0)],[sigma0;;])
    dat = BeliefStateTransitions.simulation(x0,s0,T,filter,P,model,R)
    if dat =="failed"
        return dat
    end 
        
    return sum(broadcast(t -> dat[5][t] * delta^t, 1:T))
    
end 
    
function ENPV(B0, sigma0, P,delta, T, NMC, model,  R;Nfilter = 500)
    
    acc = zeros(NMC)
            count = 0
    Threads.@threads for i in 1:NMC
        if mod(i,50) == 0
            print(i, " ")
        end 
        npv = NPV(B0, sigma0, P,delta, T, model, R;Nfilter = Nfilter)
        if npv != "failed"
            count += 1
            acc[i] =npv 
        else
            print("failed")   
        end
    end 
              
    return acc
        
end 
                        
policy1=  s -> model.Policy([s[1][1],s[2][1,1]])
policy2 = s -> steps(s, log.([25.0,50.0]), [log(0.388^2+1),log(0.388^2+1),log(0.388^2+1)])
policy3 = s -> steps(s, log.([25.0,55.0]), [log(0.2^2+1),log(0.388^2+1),log(0.388^2+1)])
policy4 = s -> steps(s, log.([25.0,55.0]), [log(0.2^2+1),log(0.388^2+1),log(0.55^2+1)])
Policies = [policy1,policy2,policy3,policy4]  
                        
B0 = [11,50,110]
sigma0 = [0.0606, 0.1315, 0.223]
                   
function main(model,policies,discount,B0,sigma0;NMC = 10,T=10)
    delta = 1/(1+discount)
    
    acc = zeros(9*4,NMC)
    num_iter=0                     
    for init in Iterators.product(B0,sigma0)
        for p in Policies
            num_iter+=1
            acc[num_iter,:] = ENPV(init[1],init[2],p,delta,T,NMC,model.mod,model.Returns;Nfilter = 500)
        end 
    end 
    return acc
end 

using CSV
using Tables
results = main(model,Policies,0.05,B0,sigma0)
CSV.write("data/alt_policies_performance.csv",Tables.table(results);sep=',')
ok now for the actual standard output
Module julia/1.8.2 loaded 
    Updating registry at `~/.julia/registries/General.toml`
   Resolving package versions...
  No Changes to `~/.julia/environments/v1.8/Project.toml`
  No Changes to `~/.julia/environments/v1.8/Manifest.toml`
Precompiling project...
[32m  âœ“ [39mDistributions
  1 dependency successfully precompiled in 14 seconds. 37 already precompiled.
   Resolving package versions...
   Installed StaticArraysCore â”€ v1.4.0
   Installed ConstructionBase â”€ v1.4.1
   Installed Setfield â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.1
   Installed CommonSolve â”€â”€â”€â”€â”€â”€ v0.2.3
   Installed MacroTools â”€â”€â”€â”€â”€â”€â”€ v0.5.10
   Installed Roots â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.0.8
    Updating `~/.julia/environments/v1.8/Project.toml`
  [f2b01f46] + Roots v2.0.8
    Updating `~/.julia/environments/v1.8/Manifest.toml`
  [38540f10] + CommonSolve v0.2.3
  [187b0558] + ConstructionBase v1.4.1
  [1914dd2f] + MacroTools v0.5.10
  [f2b01f46] + Roots v2.0.8
  [efcf1570] + Setfield v1.1.1
  [1e83bf80] + StaticArraysCore v1.4.0
  [9fa8497b] + Future
Precompiling project...
[32m  âœ“ [39m[90mCommonSolve[39m
[32m  âœ“ [39m[90mStaticArraysCore[39m
[32m  âœ“ [39m[90mConstructionBase[39m
[32m  âœ“ [39m[90mMacroTools[39m
[32m  âœ“ [39m[90mSetfield[39m
[32m  âœ“ [39mRoots
  6 dependencies successfully precompiled in 13 seconds. 38 already precompiled.
ERROR: LoadError: ArgumentError: Package NLsolve not found in current path.
- Run `import Pkg; Pkg.add("NLsolve")` to install the NLsolve package.
Stacktrace:
 [1] macro expansion
   @ ./loading.jl:1163 [inlined]
 [2] macro expansion
   @ ./lock.jl:223 [inlined]
 [3] require(into::Module, mod::Symbol)
   @ Base ./loading.jl:1144
 [4] include(fname::String)
   @ Base.MainInclude ./client.jl:476
 [5] top-level scope
   @ ~/SurplusProductionModel/FARM/surplus_production_sims.jl:2
in expression starting at /home/jhbuckne/SurplusProductionModel/FARM/SurplusProduction.jl:1
in expression starting at /home/jhbuckne/SurplusProductionModel/FARM/surplus_production_sims.jl:2
Name                : tests
User                : jhbuckne
Account             : adamgrp
Partition           : med2
Nodes               : c4-87
Cores               : 1
GPUs                : 0
State               : FAILED
ExitCode            : 1:0
Submit              : 2022-12-14T15:30:02
Start               : 2022-12-14T15:30:40
End                 : 2022-12-14T15:31:33
Waited              : 00:00:38
Reserved walltime   : 00:30:00
Used walltime       : 00:00:53
Used CPU time       : 00:00:42
% User (Computation): 84.74%
% System (I/O)      : 15.26%
Mem reserved        : 1000M
Max Mem used        : 200.20M (c4-87)
Max Disk Write      : 10.24K (c4-87)
Max Disk Read       : 4.12M (c4-87)
